
import logging
import os
import aiohttp
from aiogram import Bot, Dispatcher, executor, types
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
USDT_ADDRESS = os.getenv("USDT_ADDRESS")
PDF_PATH = "pdf/guide.pdf"
CHECK_API_URL = f"https://apilist.tronscanapi.com/api/transaction?sort=-timestamp&count=true&limit=20&start=0&address={USDT_ADDRESS}"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    await message.reply(f"""
–ü—Ä–∏–≤–µ—Ç! üëã
–ì–∞–π–¥ —Å—Ç–æ–∏—Ç 2 USDT (TRC-20)

üí≥ –ê–¥—Ä–µ—Å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:
`{USDT_ADDRESS}`

‚ö†Ô∏è –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–≥–æ –≤ —Å–µ—Ç–∏ TRC-20

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ /getguide
    """, parse_mode="Markdown")

@dp.message_handler(commands=["getguide"])
async def check_payment_and_send(message: types.Message):
    user_id = message.from_user.id
    async with aiohttp.ClientSession() as session:
        async with session.get(CHECK_API_URL) as resp:
            if resp.status != 200:
                await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            data = await resp.json()
            transactions = data.get("data", [])
            for tx in transactions:
                if tx.get("toAddress") == USDT_ADDRESS and float(tx.get("amount", 0)) >= 2:
                    await message.reply_document(types.InputFile(PDF_PATH))
                    return
            await message.reply("–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 1‚Äì2 –º–∏–Ω—É—Ç—ã.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
